1460. Make Two Arrays Equal by Reversing Sub-arrays

You are given two integer arrays of equal length target and arr. In one step, you can select any non-empty sub-array of arr and reverse it. You are allowed to make any number of steps.

Return true if you can make arr equal to target or false otherwise.

 

Example 1:

Input: target = [1,2,3,4], arr = [2,4,1,3]
Output: true
Explanation: You can follow the next steps to convert arr to target:
1- Reverse sub-array [2,4,1], arr becomes [1,4,2,3]
2- Reverse sub-array [4,2], arr becomes [1,2,4,3]
3- Reverse sub-array [4,3], arr becomes [1,2,3,4]
There are multiple ways to convert arr to target, this is not the only way to do so.
Example 2:

Input: target = [7], arr = [7]
Output: true
Explanation: arr is equal to target without any reverses.
Example 3:

Input: target = [3,7,9], arr = [3,7,11]
Output: false
Explanation: arr does not have value 9 and it can never be converted to target.
 

Constraints:

target.length == arr.length
1 <= target.length <= 1000
1 <= target[i] <= 1000
1 <= arr[i] <= 1000


JAVA SOLUTION 1 (BRUTEFORE) :-

class Solution {
    public boolean canBeEqual(int[] target, int[] arr) {
        Arrays.sort(target);
        Arrays.sort(arr);
        for(int i = 0 ; i < arr.length; i++){
            if(target[i] != arr[i]) return false;
        }
        return true;
    }
}


JAVA SOLUTION 2 (COUNTING SORT APPROACH):-

class Solution {
    public boolean canBeEqual(int[] target, int[] arr) {
        int result[] = new int[1001];
        for(int i = 0;i < arr.length ; i++)result[arr[i]]++;
        for(int j = 0;j < arr.length ; j++)result[target[j]]--;
        for(int i = 0;i < result.length ; i++){
            if(result[i] != 0 ) return false;
        }
        return true;
        
    }
}

JAVA SOLUTION 3 (USING HASHSET ) :-

class Solution {
    public boolean canBeEqual(int[] target, int[] arr) {
        Map<Integer , Integer> map = new HashMap<>();
        for(int i = 0 ; i < target.length ; i++){
            int ele = target[i];
            map.put(ele, map.getOrDefault(ele,0)+1);
            }
        for(int i  = 0 ; i < arr.length ; i++){
            int ele = arr[i];
            if(!map.containsKey(ele)) return false;
            if(map.get(ele) == 0 ) return false;
            map.put(ele,map.getOrDefault(ele,0)-1);
        }
        for(int count : map.values()){
            if (count != 0 ) return false;
        }
        return true;
    }
}