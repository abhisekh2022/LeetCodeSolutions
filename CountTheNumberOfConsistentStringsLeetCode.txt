1684. Count the Number of Consistent Strings

You are given a string allowed consisting of distinct characters and an array of strings words. A string is consistent if all characters in the string appear in the string allowed.

Return the number of consistent strings in the array words.

 

Example 1:

Input: allowed = "ab", words = ["ad","bd","aaab","baa","badab"]
Output: 2
Explanation: Strings "aaab" and "baa" are consistent since they only contain characters 'a' and 'b'.
Example 2:

Input: allowed = "abc", words = ["a","b","c","ab","ac","bc","abc"]
Output: 7
Explanation: All strings are consistent.
Example 3:

Input: allowed = "cad", words = ["cc","acd","b","ba","bac","bad","ac","d"]
Output: 4
Explanation: Strings "cc", "acd", "ac", and "d" are consistent.
 

Constraints:

1 <= words.length <= 104
1 <= allowed.length <= 26
1 <= words[i].length <= 10
The characters in allowed are distinct.
words[i] and allowed contain only lowercase English letters.

JAVA SOLUTION 1 : 

class Solution {
    public int countConsistentStrings(String allowed, String[] words) {
        int output = 0;
        boolean alphaMap[] = new boolean[26];
        for(int i = 0 ; i < allowed.length() ; i++){
            char x = allowed.charAt(i);
            alphaMap[x-'a'] = true;
        }
        for(String word : words){
            boolean flag = true;
            for(int j = 0; j<word.length();j++){
                char c = word.charAt(j);
                if(!alphaMap[c - 'a']){
                    flag = false;
                    break;
                }
            }
            if(flag) output++;
        }
        
        return output;
    }
}



JAVA SOLUTION 2 :

class Solution {
    public int countConsistentStrings(String allowed, String[] words) {
        Set<Character> set = new HashSet<Character>();
        for(int i = 0 ; i < allowed.length(); i++){
            set.add(allowed.charAt(i));
        }
        int output = 0,Len,j;
        for(String word : words){
            Len = word.length();
            for(j = 0 ; j < Len ; j++){
                if(!set.contains(word.charAt(j))) break;
            }
            if(Len == j) output++;
        }
        return output;
    }
}